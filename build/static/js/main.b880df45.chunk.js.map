{"version":3,"sources":["packages/card-react/tests/testIds.ts","packages/card-react/src/Card.tsx","packages/movie-search-bar-react/src/MovieSearchBarContainer.tsx","packages/movie-display-react/tests/testIds.ts","packages/movie-display-react/src/MovieDisplay.tsx","packages/nominations-display-react/src/NominationsDisplay.tsx","packages/search-results-display-react/src/SearchResultsDisplay.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["testIds","component","Component","styled","div","Card","children","className","data-testid","options","value","label","MovieSearchBarContainer","generateSearchResults","useState","searchString","setSearchString","loading","updateSearchString","useCallback","TextField","onChange","prefix","Icon","source","SearchMinor","color","Dot","MovieTitleAndTitle","p","MovieDisplay","Title","Year","StyledMovieDisplay","Page","PageContent","h1","ResultsAndNominationsContainer","ResultsAndNominationsSharedStyle","css","StyledNominationsDisplay","nominations","removeNomination","Heading","map","nomination","Button","onClick","imdbID","size","StyledSearchResultsDisplay","error","results","nominateFilm","nominated","disabled","later","delay","Promise","resolve","setTimeout","App","setNominations","searchResults","setSearchResults","currentSearchString","setCurrentSearchString","setLoading","useEffect","generateSearchResultsAsync","a","fetch","apiSearchResultRaw","json","apiSearchResultJSON","Error","resultsWithNomination","Search","result","find","AppProvider","i18n","translations","console","log","filmId","searchResult","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b880df45.chunk.js","sourcesContent":["const testIds = {\n    component: \"movie-search-bar-container-react-component\",\n};\n  \nexport default testIds;","import React from \"react\";\nimport styled from \"styled-components\";\nimport testIds from \"../tests/testIds\";\n\nconst Component = styled.div`\n    background-color: white;\n    padding: 2.5% 4%;\n    box-shadow: 0px 1px 16px rgba(0, 0, 0, 0.1);\n`;\n\ntype CardProps = {\n    children?: React.ReactNode;\n    className?: string;\n};\n\nexport const Card = ({children, className}: CardProps) => {\n    return (\n        <Component data-testid={testIds.component} className={className}>\n            {children}\n        </Component>\n    );\n}","import { Icon, TextField } from \"@shopify/polaris\";\nimport React, { useCallback, useState } from \"react\";\nimport styled from \"styled-components\";\nimport {SearchMinor} from '@shopify/polaris-icons';\nimport { Card } from \"../../card-react\";\n\nconst options = [\n    {value: \"test1\", label: \"Test 1\"},\n    {value: \"test2\", label: \"Test 2\"},\n    {value: \"test3\", label: \"Test 3\"},\n    {value: \"test4\", label: \"Test 4\"},\n]\n\nconst Component = styled(Card)`\n    width: 100%;\n`;\n\ntype MovieSearchBarContainerProps = { \n    generateSearchResults: (searchString: string) => void;\n    className?: string;\n};\n\nexport const MovieSearchBarContainer = ({generateSearchResults, className}: MovieSearchBarContainerProps) => {\n    const [searchString, setSearchString] = useState(\"\");\n    const [selectedOptions, setSelectedOptions] = useState([]);\n    const [loading, setLoading] = useState(false);\n    \n    const onSearch = () => generateSearchResults(searchString);\n\n    const updateSearchString = useCallback((value: string | any) => {\n        setSearchString(value);\n        generateSearchResults(value);\n    }, [options, loading]);\n\n    return (\n        <Component className={className}>\n            <TextField\n                label=\"Movie Title\"\n                onChange={updateSearchString}\n                value={searchString}\n                prefix={<Icon source={SearchMinor} color=\"base\" />}\n            />\n        </Component>\n    );\n}","const testIds = {\n    component: \"movie-display-react-component\",\n};\n  \nexport default testIds;","import React from \"react\";\nimport styled from \"styled-components\";\nimport testIds from \"../tests/testIds\";\n\nconst Component = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    margin-left: 2rem;\n`;\n\nconst Dot = styled.div`\n    border-radius: 50%;\n    background-color: black;\n    width: 4px;\n    height: 4px;\n    margin: auto 0;\n    margin-right: 2rem;\n`;\n\nconst MovieTitleAndTitle = styled.p`\n    margin: auto 0;\n    margin-right: 2rem;\n`;\n\nexport type MovieData = {\n    Title: string;\n    Year: string;\n    imdbID: string;\n}\n\ntype MovieDisplayProps = MovieData & { \n    children?: React.ReactNode;\n    className?: string;\n};\n\n// TODO when title is too long it looks bad\nexport const MovieDisplay = ({Title, children, Year, className}: MovieDisplayProps) => {\n\n    return (\n        <Component data-testid={testIds.component} className={className}>\n            <Dot />\n            <MovieTitleAndTitle>{`${Title} (${Year})`}</MovieTitleAndTitle>\n            {children}\n        </Component>\n    );\n}","import { Button, Heading } from \"@shopify/polaris\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { Card } from \"../../card-react\";\nimport { MovieData, MovieDisplay } from \"../../movie-display-react\";\n\nconst Component = styled(Card)`\n    background-color: white;\n    padding: 2.5% 4%;\n    height: fit-content;\n`;\n\nconst StyledMovieDisplay = styled(MovieDisplay)`\n    margin-bottom: 1rem;\n`;\n\ntype NominationsDisplayProps = { \n    className?: string;\n    nominations: MovieData[];\n    removeNomination: (filmId: string) => void;\n};\n\nexport const NominationsDisplay = ({className, nominations, removeNomination}: NominationsDisplayProps) => {\n    return (\n        <Component className={className}>\n            <Heading>Nominations</Heading>\n            {\n                nominations.map(nomination => \n                    <StyledMovieDisplay key={nomination.imdbID} {...nomination}>\n                        <Button onClick={() => removeNomination(nomination.imdbID)} size={\"slim\"}>Remove</Button>\n                    </StyledMovieDisplay>\n                )\n            }\n        </Component>\n    );\n}","import { Button, Heading } from \"@shopify/polaris\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { Card } from \"../../card-react\";\nimport { MovieDisplay } from \"../../movie-display-react\";\n\nconst Component = styled(Card)``;\n\nconst StyledMovieDisplay = styled(MovieDisplay)`\n    margin-bottom: 1rem;\n`;\n\nexport type ResultType = {\n    Title: string;\n    Year: string;\n    imdbID: string;\n    nominated: boolean;\n};\n\ntype ResultsDisplayProps = {\n    className?: string;\n    results: ResultType[];\n    searchString: string;\n    nominateFilm: (filmId: string) => void;\n    loading: boolean;\n    error?: string;\n};\n\nexport const SearchResultsDisplay = ({error,className, results, nominateFilm, searchString, loading}: ResultsDisplayProps) => {\n    return (\n        <Component className={className}>\n            <Heading>Results for \"{searchString}\"</Heading>\n            {\n                !loading ? \n                <>\n                    {results && results.map(({imdbID, Title, Year, nominated}) => \n                        <StyledMovieDisplay key={imdbID} imdbID={imdbID} Title={Title} Year={Year}>\n                            <Button onClick={() => nominateFilm(imdbID)} disabled={nominated} size={\"slim\"}>Nominate</Button>\n                        </StyledMovieDisplay>\n                    )}\n                    {error && error}\n                </>\n                : \"loading\" // TODO loading animation\n            }\n        </Component>\n    );\n}","import React, { useEffect, useState } from 'react';\nimport {AppProvider} from '@shopify/polaris';\nimport styled, {css} from 'styled-components';\nimport translations from '@shopify/polaris/locales/en.json';\nimport { MovieSearchBarContainer } from './packages/movie-search-bar-react';\nimport { NominationsDisplay } from './packages/nominations-display-react';\nimport { ResultType, SearchResultsDisplay } from './packages/search-results-display-react';\nimport { MovieData } from './packages/movie-display-react';\n\nconst TestResults = {\n  searchString: \"\",\n  results: [\n  {\n    title: \"test\",\n    id: \"testId\",\n    year: \"1999\",\n    nominated: true\n  },\n  {\n    title: \"test2\",\n    id: \"testId2\",\n    year: \"1999\",\n    nominated: false\n  }\n  ]\n};\n\nconst TestNominations = [\n  {\n    Title: \"test\",\n    imdbID: \"testId\",\n    Year: \"1999\",\n  }\n];\n\nconst Page = styled.div`\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  background-color: #f4f6f8;\n`;\n\nconst PageContent = styled.div`\n  width: 85rem;\n  margin: auto;\n`;\n\nconst Title = styled.h1`\n  font-size: 3rem;\n  margin-bottom: 2rem;\n`;\n\nconst ResultsAndNominationsContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  margin-top: 2rem;\n`;\n\nconst ResultsAndNominationsSharedStyle = css`\n  width: 49%;\n`;\n\nconst StyledNominationsDisplay = styled(NominationsDisplay)`\n  ${ResultsAndNominationsSharedStyle};\n`;\n\nconst StyledSearchResultsDisplay = styled(SearchResultsDisplay)`\n  ${ResultsAndNominationsSharedStyle};\n`;\n\nfunction later(delay: number) {\n  return new Promise(function(resolve) {\n      setTimeout(resolve, delay);\n  });\n}\n\nfunction App() {\n  const [nominations, setNominations] = useState([] as MovieData[]);\n  const [searchResults, setSearchResults] = useState({} as {searchString: string, results: ResultType[], error: string} | null);\n  const [currentSearchString, setCurrentSearchString] = useState(null as null | string); // TODO different name as it's purpose is different now.\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    // this if makes sure the code does not run on the startup of the component.\n    if (currentSearchString != null) {  \n      if (searchResults?.searchString == currentSearchString) {\n        // good to go\n        setLoading(false);\n      } else {\n        setLoading(true);\n      }\n    }\n  }, [searchResults])\n\n  const generateSearchResults = (searchString: string) => {\n    console.log(searchString);\n    setCurrentSearchString(searchString);\n    setLoading(true);\n    generateSearchResultsAsync(searchString);\n  }\n\n  const generateSearchResultsAsync = async (searchString: string) => {\n    try {\n      const apiSearchResultRaw = await fetch(`http://www.omdbapi.com/?s=${searchString}&page=1&type=movie&apikey=24e07721`);\n      const apiSearchResultJSON = await apiSearchResultRaw.json();\n      // This is because the API returns so quickly you can be mid typing and it \n      await later(500);\n     \n      if (!apiSearchResultJSON.Error) {\n        const resultsWithNomination = apiSearchResultJSON.Search.map((result: MovieData) => {\n          return {...result, nominated: !!nominations.find(nomination => nomination.imdbID == result.imdbID)};\n        });\n        setSearchResults({results: resultsWithNomination, searchString: searchString, error: \"\"}); \n      }\n      else setSearchResults({results: [], searchString: searchString, error: apiSearchResultJSON.Error}); \n    } catch(err) {\n      setSearchResults({results: [], searchString: searchString, error: \"Error\"});\n    }\n  };\n\n  const nominateFilm = (filmId: string) => {\n      if (searchResults != null) {\n        setSearchResults({...searchResults, results: searchResults.results.map(searchResult => {\n          if (searchResult.imdbID == filmId) {\n            setNominations([...nominations, {\n              Title: searchResult.Title,\n              Year: searchResult.Year,\n              imdbID: searchResult.imdbID\n            }]);\n            return {...searchResult, nominated: true};\n          }\n          return searchResult;\n        })});\n    }\n  }\n\n  const removeNomination = (filmId: string) => {\n    setNominations(nominations.filter(nomination => {\n      return !(nomination.imdbID == filmId);\n    }));\n\n    if (searchResults != null) {\n      setSearchResults({...searchResults, results: searchResults.results.map(searchResult => {\n        return {...searchResult, nominated: searchResult.imdbID == filmId ? false : searchResult.nominated};\n      })});\n    }\n  }\n\n  return (\n    <AppProvider i18n={translations}>\n      <Page>\n        <PageContent>\n          <Title>The Shoppies</Title>\n          <MovieSearchBarContainer generateSearchResults={generateSearchResults} />\n          <ResultsAndNominationsContainer>\n            <StyledSearchResultsDisplay loading={loading} error={searchResults?.error} searchString={searchResults != null ? searchResults.searchString : \"\"} nominateFilm={nominateFilm} results={searchResults != null ? searchResults.results : []} />\n            <StyledNominationsDisplay removeNomination={removeNomination} nominations={nominations} />\n          </ResultsAndNominationsContainer>\n        </PageContent>\n      </Page>\n    </AppProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"@shopify/polaris/dist/styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}